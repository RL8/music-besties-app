{"mappings":"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","sources":["<anon>","js/vue-app.js"],"sourcesContent":["// Vue 3 Application for Music Besties\nconst { createApp, reactive, toRefs } = Vue;\n// Create the Vue application\nconst app = createApp({\n    setup () {\n        // Reactive state\n        const state = reactive({\n            // Core app state\n            savedData: {},\n            currentSelectionOrders: {},\n            activeTabId: 'eras',\n            currentScreen: 'dashboard',\n            // UI state\n            isSaveModalVisible: false,\n            isSidebarVisible: false,\n            currentSidebarTabId: null,\n            currentSidebarView: 'rankings',\n            isReviewEditorVisible: false,\n            // DOM references will be set in mounted()\n            dashboardGridContainer: null,\n            tabButtonsContainer: null,\n            tabPanelsContainer: null,\n            sidebarTitleContainer: null,\n            sidebarChipContainer: null,\n            sidebarTabButtonReview: null,\n            reviewDisplayArea: null,\n            reviewDisplayStars: null,\n            reviewDisplayComment: null,\n            reviewEditorEraName: null,\n            reviewEditorCommentInput: null,\n            reviewEditorCommentCharCount: null,\n            reviewEditorRatingInputs: null,\n            reviewEditorRatingDescription: null\n        });\n        // --- Utility Functions ---\n        function deepCopy(obj) {\n            return JSON.parse(JSON.stringify(obj));\n        }\n        // --- Screen Management ---\n        function showScreen(screenId) {\n            closeSidebar();\n            state.currentScreen = screenId;\n            if (screenId === 'dashboard') populateDashboard();\n            else if (screenId === 'edit') {\n                state.currentSelectionOrders = {};\n                Object.keys(state.savedData).forEach((key)=>{\n                    if (Array.isArray(state.savedData[key])) state.currentSelectionOrders[key] = deepCopy(state.savedData[key]);\n                    else if (typeof state.savedData[key] === 'object' && state.savedData[key]?.selection) state.currentSelectionOrders[key] = deepCopy(state.savedData[key].selection);\n                });\n                // Initialize after Vue has updated the DOM\n                setTimeout(()=>{\n                    initializeTabs();\n                    Object.keys(state.currentSelectionOrders).forEach((tabId)=>{\n                        reorderChipsInContainer(tabId);\n                        updateTabButtonCount(tabId);\n                    });\n                    switchTab('eras', true);\n                }, 0);\n            }\n        }\n        // --- Persistence Functions ---\n        function loadRankings() {\n            try {\n                const dataStr = localStorage.getItem(LOCAL_STORAGE_KEY);\n                state.savedData = dataStr ? JSON.parse(dataStr) : {};\n                if (!state.savedData['eras']) state.savedData['eras'] = [];\n                erasWithSongs.forEach((era)=>{\n                    if (!state.savedData[era.id]) state.savedData[era.id] = {\n                        selection: [],\n                        rating: 0,\n                        comment: ''\n                    };\n                    else if (state.savedData[era.id].selection === undefined) state.savedData[era.id] = {\n                        selection: [],\n                        rating: state.savedData[era.id].rating || 0,\n                        comment: state.savedData[era.id].comment || ''\n                    };\n                });\n                console.log(\"Data loaded:\", state.savedData);\n            } catch (e) {\n                console.error(\"Failed to load data:\", e);\n                state.savedData = {\n                    eras: []\n                };\n                erasWithSongs.forEach((era)=>{\n                    state.savedData[era.id] = {\n                        selection: [],\n                        rating: 0,\n                        comment: ''\n                    };\n                });\n            }\n        }\n        function saveRankings() {\n            try {\n                Object.keys(state.currentSelectionOrders).forEach((tabId)=>{\n                    if (tabId === 'eras') state.savedData['eras'] = deepCopy(state.currentSelectionOrders['eras']);\n                    else if (state.savedData[tabId]) state.savedData[tabId].selection = deepCopy(state.currentSelectionOrders[tabId] || []);\n                });\n                localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(state.savedData));\n                console.log(\"Rankings saved:\", state.savedData);\n                return true;\n            } catch (e) {\n                console.error(\"Failed to save rankings:\", e);\n                alert(\"Error saving rankings!\");\n                return false;\n            }\n        }\n        function saveReview() {\n            if (!state.currentSidebarTabId || state.currentSidebarTabId === 'eras') return;\n            const selectedRatingInput = document.querySelector('#review-editor-form .star-rating input[name=\"review-editor-rating\"]:checked');\n            const rating = selectedRatingInput ? parseInt(selectedRatingInput.value, 10) : 0;\n            const comment = state.reviewEditorCommentInput.value.trim();\n            try {\n                state.savedData[state.currentSidebarTabId].rating = rating;\n                state.savedData[state.currentSidebarTabId].comment = comment;\n                localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(state.savedData));\n                // Update the view-only display\n                state.reviewDisplayStars.innerHTML = rating > 0 ? \"\\u2605\".repeat(rating) + \"\\u2606\".repeat(5 - rating) : '';\n                state.reviewDisplayStars.classList.toggle('unrated', rating === 0);\n                state.reviewDisplayComment.textContent = comment;\n                if (rating === 0 && !comment) state.reviewDisplayArea.innerHTML = '<p class=\"no-review\">No review yet.</p>';\n                else {\n                    if (!state.reviewDisplayArea.contains(state.reviewDisplayStars)) state.reviewDisplayArea.prepend(state.reviewDisplayStars);\n                    if (!state.reviewDisplayArea.contains(state.reviewDisplayComment)) state.reviewDisplayArea.appendChild(state.reviewDisplayComment);\n                }\n                hideReviewEditor();\n                populateDashboard();\n                return true;\n            } catch (e) {\n                console.error(`Failed to save review for ${state.currentSidebarTabId}:`, e);\n                alert(\"Error saving review!\");\n                return false;\n            }\n        }\n        // --- Dashboard Functions ---\n        function populateDashboard() {\n            if (!state.dashboardGridContainer) return;\n            state.dashboardGridContainer.innerHTML = '';\n            createDashboardGridItem('eras', 'Eras', eraNamesInOrder.length);\n            erasWithSongs.forEach((era)=>{\n                createDashboardGridItem(era.id, era.name, era.songs.length);\n            });\n        }\n        function createRankIndicatorHTML(rank) {\n            let emojiHTML = '';\n            if (rank === 1) emojiHTML = '<span class=\"emoji\">\\uD83D\\uDC51</span>';\n            else if (rank === 2) emojiHTML = '<span class=\"emoji\">\\uD83E\\uDD48</span>';\n            else if (rank === 3) emojiHTML = '<span class=\"emoji\">\\uD83E\\uDD49</span>';\n            return `<span class=\"chip-rank-indicator\">${emojiHTML}${rank}</span>`;\n        }\n        function createDashboardGridItem(tabId, title, totalCount) {\n            const card = document.createElement('div');\n            card.className = 'dashboard-grid-card no-hover-highlight';\n            card.dataset.tabId = tabId;\n            card.setAttribute('role', 'button');\n            card.setAttribute('tabindex', '0');\n            const eraData = state.savedData[tabId];\n            const selectedCount = (tabId === 'eras' ? eraData?.length : eraData?.selection?.length) || 0;\n            const rating = (tabId !== 'eras' ? eraData?.rating : 0) || 0;\n            const emoji = eraEmojis[tabId] || eraEmojis[title] || '';\n            let rank = -1;\n            let rankIndicatorHTML = '';\n            let starsHTML = '<span class=\"dashboard-stars\">&nbsp;</span>';\n            if (tabId !== 'eras') {\n                const eraRankIndex = (state.savedData['eras'] || []).indexOf(title);\n                if (eraRankIndex !== -1) {\n                    rank = eraRankIndex + 1;\n                    rankIndicatorHTML = `<div class=\"dashboard-rank-indicator-wrapper\">${createRankIndicatorHTML(rank)}</div>`;\n                }\n                if (rating > 0) starsHTML = `<span class=\"dashboard-stars\">${\"\\u2605\".repeat(rating)}${\"\\u2606\".repeat(5 - rating)}</span>`;\n            }\n            card.dataset.rank = rank > 0 ? rank : '';\n            if (selectedCount > 0) card.classList.add('selected');\n            if (selectedCount === MAX_SELECTION) card.classList.add('all-selected');\n            card.innerHTML = `\n                ${rankIndicatorHTML}\n                <span class=\"card-title\"><span class=\"emoji\">${emoji}</span>${title}</span>\n                <span class=\"card-count\">${selectedCount} of ${totalCount}</span>\n                ${starsHTML}\n            `;\n            card.addEventListener('click', handleDashboardCardClick);\n            card.addEventListener('keydown', (e)=>{\n                if (e.key === 'Enter' || e.key === ' ') {\n                    e.preventDefault();\n                    handleDashboardCardClick(e);\n                }\n            });\n            state.dashboardGridContainer.appendChild(card);\n        }\n        function handleDashboardCardClick(event) {\n            const card = event.currentTarget;\n            const tabId = card.dataset.tabId;\n            const rank = card.dataset.rank;\n            if (tabId) openSidebar(tabId, rank);\n        }\n        // --- Modal Functions ---\n        function showSaveConfirmModal() {\n            state.isSaveModalVisible = true;\n        }\n        function hideSaveConfirmModal() {\n            state.isSaveModalVisible = false;\n        }\n        function saveAndExit() {\n            if (saveRankings()) {\n                hideSaveConfirmModal();\n                showScreen('dashboard');\n            }\n        }\n        // --- Sidebar Functions ---\n        function openSidebar(tabId, rank = '') {\n            state.currentSidebarTabId = tabId;\n            state.isSidebarVisible = true;\n            const eraData = erasWithSongs.find((e)=>e.id === tabId || e.name === tabId);\n            const baseTitle = tabId === 'eras' ? 'Eras' : eraData?.name || 'Rankings';\n            const emoji = eraEmojis[tabId] || eraEmojis[baseTitle] || '';\n            // Build title container content\n            let titleContainerHTML = `<span class=\"emoji\">${emoji}</span>`;\n            titleContainerHTML += `<span class=\"sidebar-title title-text\">${baseTitle}</span>`;\n            if (tabId !== 'eras' && rank) titleContainerHTML += createRankIndicatorHTML(parseInt(rank, 10));\n            state.sidebarTitleContainer.innerHTML = titleContainerHTML;\n            // Populate Chips (Rankings Panel)\n            state.sidebarChipContainer.innerHTML = '';\n            const allTags = tabId === 'eras' ? eraNamesInOrder : originalSongLists[tabId] || [];\n            const savedSelection = (tabId === 'eras' ? state.savedData['eras'] : state.savedData[tabId]?.selection) || [];\n            const displayOrder = [];\n            const unselectedTags = [];\n            allTags.forEach((tag)=>{\n                if (!savedSelection.includes(tag)) unselectedTags.push(tag);\n            });\n            savedSelection.forEach((tag)=>displayOrder.push(tag));\n            unselectedTags.forEach((tag)=>displayOrder.push(tag));\n            displayOrder.forEach((tag)=>{\n                const chipDiv = document.createElement('div');\n                chipDiv.className = 'sidebar-chip';\n                const indexInSelection = savedSelection.indexOf(tag);\n                if (indexInSelection !== -1) {\n                    chipDiv.classList.add('selected');\n                    const rankNum = indexInSelection + 1;\n                    chipDiv.innerHTML = createRankIndicatorHTML(rankNum);\n                }\n                chipDiv.appendChild(document.createTextNode(tag));\n                state.sidebarChipContainer.appendChild(chipDiv);\n            });\n            // Populate Review Display (Review Panel)\n            if (tabId !== 'eras' && state.savedData[tabId]) {\n                const rating = state.savedData[tabId].rating || 0;\n                const comment = state.savedData[tabId].comment || '';\n                state.reviewDisplayStars.innerHTML = rating > 0 ? \"\\u2605\".repeat(rating) + \"\\u2606\".repeat(5 - rating) : '';\n                state.reviewDisplayStars.classList.toggle('unrated', rating === 0);\n                state.reviewDisplayComment.textContent = comment;\n                if (rating === 0 && !comment) state.reviewDisplayArea.innerHTML = '<p class=\"no-review\">No review yet.</p>';\n                else {\n                    if (!state.reviewDisplayArea.contains(state.reviewDisplayStars)) state.reviewDisplayArea.prepend(state.reviewDisplayStars);\n                    if (!state.reviewDisplayArea.contains(state.reviewDisplayComment)) state.reviewDisplayArea.appendChild(state.reviewDisplayComment);\n                }\n                state.sidebarTabButtonReview.classList.remove('hidden');\n                hideReviewEditor();\n            } else state.sidebarTabButtonReview.classList.add('hidden');\n            // Set initial sidebar tab state (Rankings active)\n            switchSidebarTab('sidebar-panel-rankings');\n        }\n        function closeSidebar() {\n            state.isSidebarVisible = false;\n            state.currentSidebarTabId = null;\n        }\n        // --- Sidebar Tab Switching ---\n        function switchSidebarTab(targetPanelId) {\n            state.currentSidebarView = targetPanelId.replace('sidebar-panel-', '');\n        }\n        // --- Review Editor Functions ---\n        function showReviewEditor() {\n            if (!state.currentSidebarTabId || state.currentSidebarTabId === 'eras') return;\n            const eraData = state.savedData[state.currentSidebarTabId];\n            const eraInfo = erasWithSongs.find((e)=>e.id === state.currentSidebarTabId);\n            if (!eraData || !eraInfo) return;\n            // Update UI\n            state.reviewDisplayArea.classList.add('hidden');\n            document.getElementById('edit-review-btn').classList.add('hidden');\n            document.getElementById('review-editor-form').classList.remove('hidden');\n            state.isReviewEditorVisible = true;\n            state.reviewEditorEraName.textContent = eraInfo.name;\n            // Set initial values in editor\n            const currentRating = eraData.rating || 0;\n            state.reviewEditorRatingInputs.forEach((input)=>{\n                input.checked = parseInt(input.value, 10) === currentRating;\n            });\n            updateReviewEditorRatingDescription(currentRating);\n            state.reviewEditorCommentInput.value = eraData.comment || '';\n            updateReviewEditorCharCount();\n        }\n        function hideReviewEditor() {\n            state.reviewDisplayArea.classList.remove('hidden');\n            document.getElementById('edit-review-btn').classList.remove('hidden');\n            document.getElementById('review-editor-form').classList.add('hidden');\n            state.isReviewEditorVisible = false;\n        }\n        function updateReviewEditorRatingDescription(ratingValue) {\n            state.reviewEditorRatingDescription.textContent = RATING_DESCRIPTIONS[ratingValue] || '\\u00A0';\n        }\n        function updateReviewEditorCharCount() {\n            const currentLength = state.reviewEditorCommentInput.value.length;\n            state.reviewEditorCommentCharCount.textContent = `${currentLength} / ${COMMENT_MAX_LENGTH}`;\n        }\n        // --- Chip/Tab Functions ---\n        function logCurrentSelection() {\n            const currentSelection = state.currentSelectionOrders[state.activeTabId] || [];\n            console.log(`Selection order for ${state.activeTabId}:`, currentSelection);\n        }\n        function updateTabButtonCount(tabId) {\n            const button = document.getElementById(`tab-button-${tabId}`);\n            if (!button) return;\n            const countSpan = button.querySelector('.tab-count');\n            const totalTags = parseInt(button.dataset.totalTags || '0', 10);\n            const selectedCount = (state.currentSelectionOrders[tabId] || []).length;\n            if (countSpan) countSpan.textContent = `${selectedCount} of ${totalTags}`;\n        }\n        function reorderChipsInContainer(tabId) {\n            const panel = document.getElementById(`panel-${tabId}`);\n            if (!panel) return;\n            const chipContainer = panel.querySelector('.chip-container');\n            if (!chipContainer) return;\n            const currentSelection = state.currentSelectionOrders[tabId] || [];\n            const allChips = Array.from(chipContainer.querySelectorAll('.chip'));\n            const selectedChips = [];\n            const unselectedChips = [];\n            allChips.forEach((chip)=>{\n                if (currentSelection.includes(chip.dataset.tag)) selectedChips.push(chip);\n                else unselectedChips.push(chip);\n            });\n            selectedChips.sort((a, b)=>currentSelection.indexOf(a.dataset.tag) - currentSelection.indexOf(b.dataset.tag));\n            const originalList = tabId === 'eras' ? eraNamesInOrder : originalSongLists[tabId] || [];\n            unselectedChips.sort((a, b)=>originalList.indexOf(a.dataset.tag) - originalList.indexOf(b.dataset.tag));\n            chipContainer.innerHTML = '';\n            selectedChips.forEach((chip)=>chipContainer.appendChild(chip));\n            unselectedChips.forEach((chip)=>chipContainer.appendChild(chip));\n            updateChipRanksAndStyles(tabId);\n        }\n        function updateChipRanksAndStyles(tabId) {\n            const panel = document.getElementById(`panel-${tabId}`);\n            if (!panel) return;\n            const chipContainer = panel.querySelector('.chip-container');\n            if (!chipContainer) return;\n            const chips = chipContainer.querySelectorAll('.chip');\n            const currentSelection = state.currentSelectionOrders[tabId] || [];\n            const isMaxSelected = currentSelection.length >= MAX_SELECTION;\n            chips.forEach((chip)=>{\n                const tag = chip.dataset.tag;\n                const indexInSelection = currentSelection.indexOf(tag);\n                chip.innerHTML = '';\n                chip.classList.remove('disabled', 'opacity-50', 'cursor-not-allowed', 'pointer-events-none');\n                if (indexInSelection !== -1) {\n                    const rank = indexInSelection + 1;\n                    chip.innerHTML = createRankIndicatorHTML(rank);\n                    chip.appendChild(document.createTextNode(tag));\n                    chip.setAttribute('aria-checked', 'true');\n                    chip.dataset.rank = rank;\n                    chip.classList.add('bg-blue-500', 'text-white', 'border-blue-500');\n                    chip.classList.remove('border-gray-300', 'bg-gray-100', 'text-gray-700');\n                } else {\n                    chip.appendChild(document.createTextNode(tag));\n                    chip.setAttribute('aria-checked', 'false');\n                    delete chip.dataset.rank;\n                    chip.classList.add('border-gray-300', 'bg-gray-100', 'text-gray-700');\n                    chip.classList.remove('bg-blue-500', 'text-white', 'border-blue-500');\n                    if (isMaxSelected) {\n                        chip.classList.add('disabled', 'opacity-50', 'cursor-not-allowed', 'pointer-events-none');\n                        chip.classList.remove('bg-gray-100', 'border-gray-300', 'text-gray-700');\n                        chip.classList.add('bg-gray-100', 'border-gray-200', 'text-gray-400');\n                    } else {\n                        chip.classList.remove('bg-gray-100', 'border-gray-200', 'text-gray-400');\n                        chip.classList.add('bg-gray-100', 'border-gray-300', 'text-gray-700');\n                    }\n                }\n            });\n        }\n        function handleChipClick(event) {\n            event.preventDefault();\n            const chip = event.currentTarget;\n            const tag = chip.dataset.tag;\n            const chipContainer = chip.closest('.chip-container');\n            const tabId = chipContainer?.dataset.tabId;\n            if (!tabId || chip.classList.contains('disabled')) return;\n            if (!state.currentSelectionOrders[tabId]) state.currentSelectionOrders[tabId] = [];\n            let currentSelection = state.currentSelectionOrders[tabId];\n            const isSelected = currentSelection.includes(tag);\n            if (!isSelected) {\n                if (currentSelection.length >= MAX_SELECTION) {\n                    alert(`You can only select up to ${MAX_SELECTION} items for this tab.`);\n                    return;\n                }\n                currentSelection.push(tag);\n            } else state.currentSelectionOrders[tabId] = currentSelection.filter((selectedTag)=>selectedTag !== tag);\n            reorderChipsInContainer(tabId);\n            updateTabButtonCount(tabId);\n            logCurrentSelection();\n        }\n        function handleChipKeyDown(event) {\n            const chip = event.currentTarget;\n            if (chip.classList.contains('disabled')) {\n                event.preventDefault();\n                return;\n            }\n            if (event.key === ' ' || event.key === 'Enter') {\n                event.preventDefault();\n                handleChipClick(event);\n            }\n        }\n        function populateChips(tabId, tags) {\n            const panel = document.getElementById(`panel-${tabId}`);\n            if (!panel) return;\n            const chipContainer = panel.querySelector('.chip-container');\n            if (!chipContainer) return;\n            chipContainer.innerHTML = '';\n            const tagsToPopulate = tabId === 'eras' ? eraNamesInOrder : originalSongLists[tabId] || [];\n            tagsToPopulate.forEach((tag)=>{\n                const chip = document.createElement('div');\n                chip.className = 'chip no-hover-highlight border border-gray-300 bg-gray-100 text-gray-700 text-sm font-medium rounded-full cursor-pointer transition-colors';\n                chip.dataset.tag = tag;\n                chip.setAttribute('role', 'checkbox');\n                chip.setAttribute('aria-checked', 'false');\n                chip.setAttribute('tabindex', '0');\n                chip.addEventListener('touchstart', handleChipClick, {\n                    passive: false\n                });\n                chip.addEventListener('click', handleChipClick);\n                chip.addEventListener('keydown', handleChipKeyDown);\n                chipContainer.appendChild(chip);\n            });\n            updateChipRanksAndStyles(tabId);\n        }\n        function switchTab(targetTabId, force = false) {\n            if (!force && state.activeTabId === targetTabId) return;\n            const currentTabButton = document.getElementById(`tab-button-${state.activeTabId}`);\n            const currentPanel = document.getElementById(`panel-${state.activeTabId}`);\n            if (currentTabButton) {\n                currentTabButton.classList.remove('active', 'border-blue-500', 'bg-blue-50', 'text-blue-600', 'font-semibold');\n                currentTabButton.classList.add('border-transparent', 'text-gray-500');\n                currentTabButton.setAttribute('aria-selected', 'false');\n            }\n            if (currentPanel) currentPanel.classList.add('hidden');\n            const newTabButton = document.getElementById(`tab-button-${targetTabId}`);\n            const newPanel = document.getElementById(`panel-${targetTabId}`);\n            if (newTabButton) {\n                newTabButton.classList.add('active', 'border-blue-500', 'bg-blue-50', 'text-blue-600', 'font-semibold');\n                newTabButton.classList.remove('border-transparent', 'text-gray-500');\n                newTabButton.setAttribute('aria-selected', 'true');\n                newTabButton.scrollIntoView({\n                    behavior: 'smooth',\n                    block: 'nearest',\n                    inline: 'center'\n                });\n            }\n            if (newPanel) newPanel.classList.remove('hidden');\n            state.activeTabId = targetTabId;\n            logCurrentSelection();\n        }\n        function initializeTabs() {\n            state.tabButtonsContainer.innerHTML = '';\n            state.tabPanelsContainer.innerHTML = '';\n            const erasTags = erasWithSongs.map((era)=>era.name);\n            createTab('eras', 'Eras', erasTags, true);\n            erasWithSongs.forEach((era)=>{\n                createTab(era.id, era.name, era.songs);\n            });\n            Object.keys(state.currentSelectionOrders).forEach((tabId)=>{\n                updateTabButtonCount(tabId);\n            });\n        }\n        function createTab(tabId, tabName, tags, isActive = false) {\n            const button = document.createElement('button');\n            const baseButtonClasses = 'tab-button no-hover-highlight flex flex-col items-center whitespace-nowrap py-2 px-2 border-b-2 font-medium text-sm';\n            const activeClasses = 'active border-blue-500 bg-blue-50 text-blue-600 font-semibold';\n            const inactiveClasses = 'border-transparent text-gray-500';\n            button.className = `${baseButtonClasses} ${isActive ? activeClasses : inactiveClasses}`;\n            button.dataset.tabTarget = `#panel-${tabId}`;\n            button.dataset.totalTags = tags.length;\n            button.setAttribute('role', 'tab');\n            button.setAttribute('aria-controls', `panel-${tabId}`);\n            button.setAttribute('aria-selected', isActive ? 'true' : 'false');\n            button.id = `tab-button-${tabId}`;\n            const nameSpan = document.createElement('span');\n            nameSpan.textContent = tabName;\n            button.appendChild(nameSpan);\n            const countSpan = document.createElement('span');\n            countSpan.className = 'tab-count text-xs text-gray-400 mt-1';\n            const initialSelectedCount = (state.currentSelectionOrders[tabId] || []).length;\n            countSpan.textContent = `${initialSelectedCount} of ${tags.length}`;\n            button.appendChild(countSpan);\n            button.addEventListener('click', ()=>switchTab(tabId));\n            state.tabButtonsContainer.appendChild(button);\n            const panel = document.createElement('div');\n            panel.id = `panel-${tabId}`;\n            panel.className = `tab-panel ${isActive ? '' : 'hidden'}`;\n            panel.setAttribute('role', 'tabpanel');\n            panel.setAttribute('aria-labelledby', `tab-button-${tabId}`);\n            const titleText = tabId === 'eras' ? 'Select up to 3 Eras:' : `Select up to 3 Songs from ${tabName}:`;\n            panel.innerHTML = `\n                <h2 class=\"text-lg font-semibold text-gray-700 mb-4\">${titleText}</h2>\n                <div class=\"chip-container flex flex-wrap gap-3 mb-6\" data-tab-id=\"${tabId}\"></div>\n            `;\n            state.tabPanelsContainer.appendChild(panel);\n            populateChips(tabId, tags);\n        }\n        // Initialize when the component is mounted\n        function initializeDOMElements() {\n            // Main elements\n            state.dashboardGridContainer = document.getElementById('dashboard-grid');\n            state.tabButtonsContainer = document.getElementById('tab-buttons');\n            state.tabPanelsContainer = document.getElementById('tab-panels');\n            // Sidebar elements\n            state.sidebarTitleContainer = document.getElementById('sidebar-title-container');\n            state.sidebarChipContainer = document.getElementById('sidebar-chip-container');\n            state.sidebarTabButtonReview = document.getElementById('sidebar-tab-button-review');\n            // Review elements\n            state.reviewDisplayArea = document.getElementById('review-display-area');\n            state.reviewDisplayStars = document.getElementById('review-display-stars');\n            state.reviewDisplayComment = document.getElementById('review-display-comment');\n            state.reviewEditorEraName = document.getElementById('review-editor-era-name');\n            state.reviewEditorCommentInput = document.getElementById('review-editor-comment-input');\n            state.reviewEditorCommentCharCount = document.getElementById('review-editor-comment-char-count');\n            state.reviewEditorRatingInputs = document.querySelectorAll('#review-editor-form .star-rating input[name=\"review-editor-rating\"]');\n            state.reviewEditorRatingDescription = document.getElementById('review-editor-rating-description');\n            // Set up review editor events\n            state.reviewEditorCommentInput?.addEventListener('input', updateReviewEditorCharCount);\n            state.reviewEditorRatingInputs?.forEach((input)=>{\n                input.addEventListener('change', (e)=>{\n                    updateReviewEditorRatingDescription(parseInt(e.target.value, 10));\n                });\n            });\n        }\n        // Return all methods and state for the template\n        return {\n            ...toRefs(state),\n            showScreen,\n            showSaveConfirmModal,\n            hideSaveConfirmModal,\n            saveAndExit,\n            closeSidebar,\n            switchSidebarTab,\n            showReviewEditor,\n            hideReviewEditor,\n            saveReview,\n            // Lifecycle hooks\n            onMounted () {\n                initializeDOMElements();\n                loadRankings();\n                showScreen('dashboard');\n            }\n        };\n    }\n});\n// Mount the app when the DOM is ready\ndocument.addEventListener('DOMContentLoaded', ()=>{\n    app.mount('#app');\n});\n\n//# sourceMappingURL=music-besties-skeleton.664050eb.js.map\n","// Vue 3 Application for Music Besties\r\nconst { createApp, reactive, toRefs } = Vue;\r\n\r\n// Create the Vue application\r\nconst app = createApp({\r\n    setup() {\r\n        // Reactive state\r\n        const state = reactive({\r\n            // Core app state\r\n            savedData: {},\r\n            currentSelectionOrders: {},\r\n            activeTabId: 'eras',\r\n            currentScreen: 'dashboard',\r\n            \r\n            // UI state\r\n            isSaveModalVisible: false,\r\n            isSidebarVisible: false,\r\n            currentSidebarTabId: null,\r\n            currentSidebarView: 'rankings',\r\n            isReviewEditorVisible: false,\r\n            \r\n            // DOM references will be set in mounted()\r\n            dashboardGridContainer: null,\r\n            tabButtonsContainer: null,\r\n            tabPanelsContainer: null,\r\n            sidebarTitleContainer: null,\r\n            sidebarChipContainer: null,\r\n            sidebarTabButtonReview: null,\r\n            reviewDisplayArea: null,\r\n            reviewDisplayStars: null,\r\n            reviewDisplayComment: null,\r\n            reviewEditorEraName: null,\r\n            reviewEditorCommentInput: null,\r\n            reviewEditorCommentCharCount: null,\r\n            reviewEditorRatingInputs: null,\r\n            reviewEditorRatingDescription: null\r\n        });\r\n\r\n        // --- Utility Functions ---\r\n        function deepCopy(obj) {\r\n            return JSON.parse(JSON.stringify(obj));\r\n        }\r\n\r\n        // --- Screen Management ---\r\n        function showScreen(screenId) {\r\n            closeSidebar();\r\n            state.currentScreen = screenId;\r\n            \r\n            if (screenId === 'dashboard') {\r\n                populateDashboard();\r\n            } else if (screenId === 'edit') {\r\n                state.currentSelectionOrders = {};\r\n                Object.keys(state.savedData).forEach(key => {\r\n                    if (Array.isArray(state.savedData[key])) {\r\n                        state.currentSelectionOrders[key] = deepCopy(state.savedData[key]);\r\n                    } else if (typeof state.savedData[key] === 'object' && state.savedData[key]?.selection) {\r\n                        state.currentSelectionOrders[key] = deepCopy(state.savedData[key].selection);\r\n                    }\r\n                });\r\n                \r\n                // Initialize after Vue has updated the DOM\r\n                setTimeout(() => {\r\n                    initializeTabs();\r\n                    Object.keys(state.currentSelectionOrders).forEach(tabId => {\r\n                        reorderChipsInContainer(tabId);\r\n                        updateTabButtonCount(tabId);\r\n                    });\r\n                    switchTab('eras', true);\r\n                }, 0);\r\n            }\r\n        }\r\n\r\n        // --- Persistence Functions ---\r\n        function loadRankings() {\r\n            try {\r\n                const dataStr = localStorage.getItem(LOCAL_STORAGE_KEY);\r\n                state.savedData = dataStr ? JSON.parse(dataStr) : {};\r\n                if (!state.savedData['eras']) state.savedData['eras'] = [];\r\n                erasWithSongs.forEach(era => {\r\n                    if (!state.savedData[era.id]) {\r\n                        state.savedData[era.id] = { selection: [], rating: 0, comment: '' };\r\n                    } else if (state.savedData[era.id].selection === undefined) {\r\n                        state.savedData[era.id] = { \r\n                            selection: [], \r\n                            rating: state.savedData[era.id].rating || 0, \r\n                            comment: state.savedData[era.id].comment || '' \r\n                        };\r\n                    }\r\n                });\r\n                console.log(\"Data loaded:\", state.savedData);\r\n            } catch (e) {\r\n                console.error(\"Failed to load data:\", e);\r\n                state.savedData = { eras: [] };\r\n                erasWithSongs.forEach(era => {\r\n                    state.savedData[era.id] = { selection: [], rating: 0, comment: '' };\r\n                });\r\n            }\r\n        }\r\n\r\n        function saveRankings() {\r\n            try {\r\n                Object.keys(state.currentSelectionOrders).forEach(tabId => {\r\n                    if (tabId === 'eras') {\r\n                        state.savedData['eras'] = deepCopy(state.currentSelectionOrders['eras']);\r\n                    } else if (state.savedData[tabId]) {\r\n                        state.savedData[tabId].selection = deepCopy(state.currentSelectionOrders[tabId] || []);\r\n                    }\r\n                });\r\n                localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(state.savedData));\r\n                console.log(\"Rankings saved:\", state.savedData);\r\n                return true;\r\n            } catch (e) {\r\n                console.error(\"Failed to save rankings:\", e);\r\n                alert(\"Error saving rankings!\");\r\n                return false;\r\n            }\r\n        }\r\n\r\n        function saveReview() {\r\n            if (!state.currentSidebarTabId || state.currentSidebarTabId === 'eras') return;\r\n            \r\n            const selectedRatingInput = document.querySelector('#review-editor-form .star-rating input[name=\"review-editor-rating\"]:checked');\r\n            const rating = selectedRatingInput ? parseInt(selectedRatingInput.value, 10) : 0;\r\n            const comment = state.reviewEditorCommentInput.value.trim();\r\n\r\n            try {\r\n                state.savedData[state.currentSidebarTabId].rating = rating;\r\n                state.savedData[state.currentSidebarTabId].comment = comment;\r\n                localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(state.savedData));\r\n                \r\n                // Update the view-only display\r\n                state.reviewDisplayStars.innerHTML = rating > 0 ? '★'.repeat(rating) + '☆'.repeat(5 - rating) : '';\r\n                state.reviewDisplayStars.classList.toggle('unrated', rating === 0);\r\n                state.reviewDisplayComment.textContent = comment;\r\n                \r\n                if (rating === 0 && !comment) {\r\n                    state.reviewDisplayArea.innerHTML = '<p class=\"no-review\">No review yet.</p>';\r\n                } else {\r\n                    if (!state.reviewDisplayArea.contains(state.reviewDisplayStars)) {\r\n                        state.reviewDisplayArea.prepend(state.reviewDisplayStars);\r\n                    }\r\n                    if (!state.reviewDisplayArea.contains(state.reviewDisplayComment)) {\r\n                        state.reviewDisplayArea.appendChild(state.reviewDisplayComment);\r\n                    }\r\n                }\r\n\r\n                hideReviewEditor();\r\n                populateDashboard();\r\n                return true;\r\n            } catch (e) {\r\n                console.error(`Failed to save review for ${state.currentSidebarTabId}:`, e);\r\n                alert(\"Error saving review!\");\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // --- Dashboard Functions ---\r\n        function populateDashboard() {\r\n            if (!state.dashboardGridContainer) return;\r\n            \r\n            state.dashboardGridContainer.innerHTML = '';\r\n            createDashboardGridItem('eras', 'Eras', eraNamesInOrder.length);\r\n            erasWithSongs.forEach(era => {\r\n                createDashboardGridItem(era.id, era.name, era.songs.length);\r\n            });\r\n        }\r\n\r\n        function createRankIndicatorHTML(rank) {\r\n            let emojiHTML = '';\r\n            if (rank === 1) emojiHTML = '<span class=\"emoji\">👑</span>';\r\n            else if (rank === 2) emojiHTML = '<span class=\"emoji\">🥈</span>';\r\n            else if (rank === 3) emojiHTML = '<span class=\"emoji\">🥉</span>';\r\n            return `<span class=\"chip-rank-indicator\">${emojiHTML}${rank}</span>`;\r\n        }\r\n\r\n        function createDashboardGridItem(tabId, title, totalCount) {\r\n            const card = document.createElement('div');\r\n            card.className = 'dashboard-grid-card no-hover-highlight';\r\n            card.dataset.tabId = tabId;\r\n            card.setAttribute('role', 'button');\r\n            card.setAttribute('tabindex', '0');\r\n\r\n            const eraData = state.savedData[tabId];\r\n            const selectedCount = (tabId === 'eras' ? eraData?.length : eraData?.selection?.length) || 0;\r\n            const rating = (tabId !== 'eras' ? eraData?.rating : 0) || 0;\r\n            const emoji = eraEmojis[tabId] || eraEmojis[title] || '';\r\n            let rank = -1;\r\n            let rankIndicatorHTML = '';\r\n            let starsHTML = '<span class=\"dashboard-stars\">&nbsp;</span>';\r\n\r\n            if (tabId !== 'eras') {\r\n                const eraRankIndex = (state.savedData['eras'] || []).indexOf(title);\r\n                if (eraRankIndex !== -1) {\r\n                    rank = eraRankIndex + 1;\r\n                    rankIndicatorHTML = `<div class=\"dashboard-rank-indicator-wrapper\">${createRankIndicatorHTML(rank)}</div>`;\r\n                }\r\n                if (rating > 0) {\r\n                    starsHTML = `<span class=\"dashboard-stars\">${'★'.repeat(rating)}${'☆'.repeat(5 - rating)}</span>`;\r\n                }\r\n            }\r\n            card.dataset.rank = rank > 0 ? rank : '';\r\n\r\n            if (selectedCount > 0) card.classList.add('selected');\r\n            if (selectedCount === MAX_SELECTION) card.classList.add('all-selected');\r\n\r\n            card.innerHTML = `\r\n                ${rankIndicatorHTML}\r\n                <span class=\"card-title\"><span class=\"emoji\">${emoji}</span>${title}</span>\r\n                <span class=\"card-count\">${selectedCount} of ${totalCount}</span>\r\n                ${starsHTML}\r\n            `;\r\n\r\n            card.addEventListener('click', handleDashboardCardClick);\r\n            card.addEventListener('keydown', (e) => {\r\n                if (e.key === 'Enter' || e.key === ' ') { \r\n                    e.preventDefault(); \r\n                    handleDashboardCardClick(e); \r\n                }\r\n            });\r\n            \r\n            state.dashboardGridContainer.appendChild(card);\r\n        }\r\n\r\n        function handleDashboardCardClick(event) {\r\n            const card = event.currentTarget;\r\n            const tabId = card.dataset.tabId;\r\n            const rank = card.dataset.rank;\r\n            if (tabId) {\r\n                openSidebar(tabId, rank);\r\n            }\r\n        }\r\n\r\n        // --- Modal Functions ---\r\n        function showSaveConfirmModal() {\r\n            state.isSaveModalVisible = true;\r\n        }\r\n\r\n        function hideSaveConfirmModal() {\r\n            state.isSaveModalVisible = false;\r\n        }\r\n\r\n        function saveAndExit() {\r\n            if (saveRankings()) {\r\n                hideSaveConfirmModal();\r\n                showScreen('dashboard');\r\n            }\r\n        }\r\n\r\n        // --- Sidebar Functions ---\r\n        function openSidebar(tabId, rank = '') {\r\n            state.currentSidebarTabId = tabId;\r\n            state.isSidebarVisible = true;\r\n            \r\n            const eraData = erasWithSongs.find(e => e.id === tabId || e.name === tabId);\r\n            const baseTitle = (tabId === 'eras') ? 'Eras' : (eraData?.name || 'Rankings');\r\n            const emoji = eraEmojis[tabId] || eraEmojis[baseTitle] || '';\r\n\r\n            // Build title container content\r\n            let titleContainerHTML = `<span class=\"emoji\">${emoji}</span>`;\r\n            titleContainerHTML += `<span class=\"sidebar-title title-text\">${baseTitle}</span>`;\r\n            if (tabId !== 'eras' && rank) {\r\n                titleContainerHTML += createRankIndicatorHTML(parseInt(rank, 10));\r\n            }\r\n            state.sidebarTitleContainer.innerHTML = titleContainerHTML;\r\n\r\n            // Populate Chips (Rankings Panel)\r\n            state.sidebarChipContainer.innerHTML = '';\r\n            const allTags = (tabId === 'eras') ? eraNamesInOrder : (originalSongLists[tabId] || []);\r\n            const savedSelection = (tabId === 'eras' ? state.savedData['eras'] : state.savedData[tabId]?.selection) || [];\r\n            const displayOrder = [];\r\n            const unselectedTags = [];\r\n            \r\n            allTags.forEach(tag => { \r\n                if (!savedSelection.includes(tag)) unselectedTags.push(tag); \r\n            });\r\n            \r\n            savedSelection.forEach(tag => displayOrder.push(tag));\r\n            unselectedTags.forEach(tag => displayOrder.push(tag));\r\n\r\n            displayOrder.forEach(tag => {\r\n                const chipDiv = document.createElement('div');\r\n                chipDiv.className = 'sidebar-chip';\r\n                const indexInSelection = savedSelection.indexOf(tag);\r\n                if (indexInSelection !== -1) {\r\n                    chipDiv.classList.add('selected');\r\n                    const rankNum = indexInSelection + 1;\r\n                    chipDiv.innerHTML = createRankIndicatorHTML(rankNum);\r\n                }\r\n                chipDiv.appendChild(document.createTextNode(tag));\r\n                state.sidebarChipContainer.appendChild(chipDiv);\r\n            });\r\n\r\n            // Populate Review Display (Review Panel)\r\n            if (tabId !== 'eras' && state.savedData[tabId]) {\r\n                const rating = state.savedData[tabId].rating || 0;\r\n                const comment = state.savedData[tabId].comment || '';\r\n                \r\n                state.reviewDisplayStars.innerHTML = rating > 0 ? '★'.repeat(rating) + '☆'.repeat(5 - rating) : '';\r\n                state.reviewDisplayStars.classList.toggle('unrated', rating === 0);\r\n                state.reviewDisplayComment.textContent = comment;\r\n                \r\n                if (rating === 0 && !comment) {\r\n                    state.reviewDisplayArea.innerHTML = '<p class=\"no-review\">No review yet.</p>';\r\n                } else {\r\n                    if (!state.reviewDisplayArea.contains(state.reviewDisplayStars)) {\r\n                        state.reviewDisplayArea.prepend(state.reviewDisplayStars);\r\n                    }\r\n                    if (!state.reviewDisplayArea.contains(state.reviewDisplayComment)) {\r\n                        state.reviewDisplayArea.appendChild(state.reviewDisplayComment);\r\n                    }\r\n                }\r\n                \r\n                state.sidebarTabButtonReview.classList.remove('hidden');\r\n                hideReviewEditor();\r\n            } else {\r\n                state.sidebarTabButtonReview.classList.add('hidden');\r\n            }\r\n\r\n            // Set initial sidebar tab state (Rankings active)\r\n            switchSidebarTab('sidebar-panel-rankings');\r\n        }\r\n\r\n        function closeSidebar() {\r\n            state.isSidebarVisible = false;\r\n            state.currentSidebarTabId = null;\r\n        }\r\n\r\n        // --- Sidebar Tab Switching ---\r\n        function switchSidebarTab(targetPanelId) {\r\n            state.currentSidebarView = targetPanelId.replace('sidebar-panel-', '');\r\n        }\r\n\r\n        // --- Review Editor Functions ---\r\n        function showReviewEditor() {\r\n            if (!state.currentSidebarTabId || state.currentSidebarTabId === 'eras') return;\r\n            \r\n            const eraData = state.savedData[state.currentSidebarTabId];\r\n            const eraInfo = erasWithSongs.find(e => e.id === state.currentSidebarTabId);\r\n            if (!eraData || !eraInfo) return;\r\n\r\n            // Update UI\r\n            state.reviewDisplayArea.classList.add('hidden');\r\n            document.getElementById('edit-review-btn').classList.add('hidden');\r\n            document.getElementById('review-editor-form').classList.remove('hidden');\r\n            state.isReviewEditorVisible = true;\r\n\r\n            state.reviewEditorEraName.textContent = eraInfo.name;\r\n\r\n            // Set initial values in editor\r\n            const currentRating = eraData.rating || 0;\r\n            state.reviewEditorRatingInputs.forEach(input => {\r\n                input.checked = parseInt(input.value, 10) === currentRating;\r\n            });\r\n            \r\n            updateReviewEditorRatingDescription(currentRating);\r\n            state.reviewEditorCommentInput.value = eraData.comment || '';\r\n            updateReviewEditorCharCount();\r\n        }\r\n\r\n        function hideReviewEditor() {\r\n            state.reviewDisplayArea.classList.remove('hidden');\r\n            document.getElementById('edit-review-btn').classList.remove('hidden');\r\n            document.getElementById('review-editor-form').classList.add('hidden');\r\n            state.isReviewEditorVisible = false;\r\n        }\r\n\r\n        function updateReviewEditorRatingDescription(ratingValue) {\r\n            state.reviewEditorRatingDescription.textContent = RATING_DESCRIPTIONS[ratingValue] || '\\u00A0';\r\n        }\r\n\r\n        function updateReviewEditorCharCount() {\r\n            const currentLength = state.reviewEditorCommentInput.value.length;\r\n            state.reviewEditorCommentCharCount.textContent = `${currentLength} / ${COMMENT_MAX_LENGTH}`;\r\n        }\r\n\r\n        // --- Chip/Tab Functions ---\r\n        function logCurrentSelection() {\r\n            const currentSelection = state.currentSelectionOrders[state.activeTabId] || [];\r\n            console.log(`Selection order for ${state.activeTabId}:`, currentSelection);\r\n        }\r\n\r\n        function updateTabButtonCount(tabId) {\r\n            const button = document.getElementById(`tab-button-${tabId}`);\r\n            if (!button) return;\r\n            \r\n            const countSpan = button.querySelector('.tab-count');\r\n            const totalTags = parseInt(button.dataset.totalTags || '0', 10);\r\n            const selectedCount = (state.currentSelectionOrders[tabId] || []).length;\r\n            \r\n            if (countSpan) {\r\n                countSpan.textContent = `${selectedCount} of ${totalTags}`;\r\n            }\r\n        }\r\n\r\n        function reorderChipsInContainer(tabId) {\r\n            const panel = document.getElementById(`panel-${tabId}`);\r\n            if (!panel) return;\r\n            \r\n            const chipContainer = panel.querySelector('.chip-container');\r\n            if (!chipContainer) return;\r\n\r\n            const currentSelection = state.currentSelectionOrders[tabId] || [];\r\n            const allChips = Array.from(chipContainer.querySelectorAll('.chip'));\r\n            const selectedChips = [];\r\n            const unselectedChips = [];\r\n            \r\n            allChips.forEach(chip => {\r\n                if (currentSelection.includes(chip.dataset.tag)) selectedChips.push(chip);\r\n                else unselectedChips.push(chip);\r\n            });\r\n\r\n            selectedChips.sort((a, b) => \r\n                currentSelection.indexOf(a.dataset.tag) - currentSelection.indexOf(b.dataset.tag)\r\n            );\r\n            \r\n            const originalList = (tabId === 'eras') ? eraNamesInOrder : (originalSongLists[tabId] || []);\r\n            unselectedChips.sort((a, b) => \r\n                originalList.indexOf(a.dataset.tag) - originalList.indexOf(b.dataset.tag)\r\n            );\r\n\r\n            chipContainer.innerHTML = '';\r\n            selectedChips.forEach(chip => chipContainer.appendChild(chip));\r\n            unselectedChips.forEach(chip => chipContainer.appendChild(chip));\r\n\r\n            updateChipRanksAndStyles(tabId);\r\n        }\r\n\r\n        function updateChipRanksAndStyles(tabId) {\r\n            const panel = document.getElementById(`panel-${tabId}`);\r\n            if (!panel) return;\r\n            \r\n            const chipContainer = panel.querySelector('.chip-container');\r\n            if (!chipContainer) return;\r\n\r\n            const chips = chipContainer.querySelectorAll('.chip');\r\n            const currentSelection = state.currentSelectionOrders[tabId] || [];\r\n            const isMaxSelected = currentSelection.length >= MAX_SELECTION;\r\n\r\n            chips.forEach(chip => {\r\n                const tag = chip.dataset.tag;\r\n                const indexInSelection = currentSelection.indexOf(tag);\r\n                chip.innerHTML = '';\r\n                chip.classList.remove('disabled', 'opacity-50', 'cursor-not-allowed', 'pointer-events-none');\r\n\r\n                if (indexInSelection !== -1) {\r\n                    const rank = indexInSelection + 1;\r\n                    chip.innerHTML = createRankIndicatorHTML(rank);\r\n                    chip.appendChild(document.createTextNode(tag));\r\n                    chip.setAttribute('aria-checked', 'true');\r\n                    chip.dataset.rank = rank;\r\n                    chip.classList.add('bg-blue-500', 'text-white', 'border-blue-500');\r\n                    chip.classList.remove('border-gray-300', 'bg-gray-100', 'text-gray-700');\r\n                } else {\r\n                    chip.appendChild(document.createTextNode(tag));\r\n                    chip.setAttribute('aria-checked', 'false');\r\n                    delete chip.dataset.rank;\r\n                    chip.classList.add('border-gray-300', 'bg-gray-100', 'text-gray-700');\r\n                    chip.classList.remove('bg-blue-500', 'text-white', 'border-blue-500');\r\n                    \r\n                    if (isMaxSelected) {\r\n                        chip.classList.add('disabled', 'opacity-50', 'cursor-not-allowed', 'pointer-events-none');\r\n                        chip.classList.remove('bg-gray-100', 'border-gray-300', 'text-gray-700');\r\n                        chip.classList.add('bg-gray-100', 'border-gray-200', 'text-gray-400');\r\n                    } else {\r\n                        chip.classList.remove('bg-gray-100', 'border-gray-200', 'text-gray-400');\r\n                        chip.classList.add('bg-gray-100', 'border-gray-300', 'text-gray-700');\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        function handleChipClick(event) {\r\n            event.preventDefault();\r\n            const chip = event.currentTarget;\r\n            const tag = chip.dataset.tag;\r\n            const chipContainer = chip.closest('.chip-container');\r\n            const tabId = chipContainer?.dataset.tabId;\r\n            \r\n            if (!tabId || chip.classList.contains('disabled')) return;\r\n\r\n            if (!state.currentSelectionOrders[tabId]) {\r\n                state.currentSelectionOrders[tabId] = [];\r\n            }\r\n            \r\n            let currentSelection = state.currentSelectionOrders[tabId];\r\n            const isSelected = currentSelection.includes(tag);\r\n\r\n            if (!isSelected) {\r\n                if (currentSelection.length >= MAX_SELECTION) {\r\n                    alert(`You can only select up to ${MAX_SELECTION} items for this tab.`);\r\n                    return;\r\n                }\r\n                currentSelection.push(tag);\r\n            } else {\r\n                state.currentSelectionOrders[tabId] = currentSelection.filter(selectedTag => selectedTag !== tag);\r\n            }\r\n\r\n            reorderChipsInContainer(tabId);\r\n            updateTabButtonCount(tabId);\r\n            logCurrentSelection();\r\n        }\r\n\r\n        function handleChipKeyDown(event) {\r\n            const chip = event.currentTarget;\r\n            if (chip.classList.contains('disabled')) {\r\n                event.preventDefault();\r\n                return;\r\n            }\r\n            \r\n            if (event.key === ' ' || event.key === 'Enter') {\r\n                event.preventDefault();\r\n                handleChipClick(event);\r\n            }\r\n        }\r\n\r\n        function populateChips(tabId, tags) {\r\n            const panel = document.getElementById(`panel-${tabId}`);\r\n            if (!panel) return;\r\n            \r\n            const chipContainer = panel.querySelector('.chip-container');\r\n            if (!chipContainer) return;\r\n            \r\n            chipContainer.innerHTML = '';\r\n            const tagsToPopulate = (tabId === 'eras') ? eraNamesInOrder : (originalSongLists[tabId] || []);\r\n            \r\n            tagsToPopulate.forEach((tag) => {\r\n                const chip = document.createElement('div');\r\n                chip.className = 'chip no-hover-highlight border border-gray-300 bg-gray-100 text-gray-700 text-sm font-medium rounded-full cursor-pointer transition-colors';\r\n                chip.dataset.tag = tag;\r\n                chip.setAttribute('role', 'checkbox');\r\n                chip.setAttribute('aria-checked', 'false');\r\n                chip.setAttribute('tabindex', '0');\r\n                chip.addEventListener('touchstart', handleChipClick, { passive: false });\r\n                chip.addEventListener('click', handleChipClick);\r\n                chip.addEventListener('keydown', handleChipKeyDown);\r\n                chipContainer.appendChild(chip);\r\n            });\r\n            \r\n            updateChipRanksAndStyles(tabId);\r\n        }\r\n\r\n        function switchTab(targetTabId, force = false) {\r\n            if (!force && state.activeTabId === targetTabId) return;\r\n\r\n            const currentTabButton = document.getElementById(`tab-button-${state.activeTabId}`);\r\n            const currentPanel = document.getElementById(`panel-${state.activeTabId}`);\r\n            \r\n            if (currentTabButton) {\r\n                currentTabButton.classList.remove('active', 'border-blue-500', 'bg-blue-50', 'text-blue-600', 'font-semibold');\r\n                currentTabButton.classList.add('border-transparent', 'text-gray-500');\r\n                currentTabButton.setAttribute('aria-selected', 'false');\r\n            }\r\n            \r\n            if (currentPanel) {\r\n                currentPanel.classList.add('hidden');\r\n            }\r\n\r\n            const newTabButton = document.getElementById(`tab-button-${targetTabId}`);\r\n            const newPanel = document.getElementById(`panel-${targetTabId}`);\r\n            \r\n            if (newTabButton) {\r\n                newTabButton.classList.add('active', 'border-blue-500', 'bg-blue-50', 'text-blue-600', 'font-semibold');\r\n                newTabButton.classList.remove('border-transparent', 'text-gray-500');\r\n                newTabButton.setAttribute('aria-selected', 'true');\r\n                newTabButton.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'center' });\r\n            }\r\n            \r\n            if (newPanel) {\r\n                newPanel.classList.remove('hidden');\r\n            }\r\n\r\n            state.activeTabId = targetTabId;\r\n            logCurrentSelection();\r\n        }\r\n\r\n        function initializeTabs() {\r\n            state.tabButtonsContainer.innerHTML = '';\r\n            state.tabPanelsContainer.innerHTML = '';\r\n            \r\n            const erasTags = erasWithSongs.map(era => era.name);\r\n            createTab('eras', 'Eras', erasTags, true);\r\n            \r\n            erasWithSongs.forEach(era => {\r\n                createTab(era.id, era.name, era.songs);\r\n            });\r\n            \r\n            Object.keys(state.currentSelectionOrders).forEach(tabId => {\r\n                updateTabButtonCount(tabId);\r\n            });\r\n        }\r\n\r\n        function createTab(tabId, tabName, tags, isActive = false) {\r\n            const button = document.createElement('button');\r\n            const baseButtonClasses = 'tab-button no-hover-highlight flex flex-col items-center whitespace-nowrap py-2 px-2 border-b-2 font-medium text-sm';\r\n            const activeClasses = 'active border-blue-500 bg-blue-50 text-blue-600 font-semibold';\r\n            const inactiveClasses = 'border-transparent text-gray-500';\r\n            \r\n            button.className = `${baseButtonClasses} ${isActive ? activeClasses : inactiveClasses}`;\r\n            button.dataset.tabTarget = `#panel-${tabId}`;\r\n            button.dataset.totalTags = tags.length;\r\n            button.setAttribute('role', 'tab');\r\n            button.setAttribute('aria-controls', `panel-${tabId}`);\r\n            button.setAttribute('aria-selected', isActive ? 'true' : 'false');\r\n            button.id = `tab-button-${tabId}`;\r\n            \r\n            const nameSpan = document.createElement('span');\r\n            nameSpan.textContent = tabName;\r\n            button.appendChild(nameSpan);\r\n            \r\n            const countSpan = document.createElement('span');\r\n            countSpan.className = 'tab-count text-xs text-gray-400 mt-1';\r\n            const initialSelectedCount = (state.currentSelectionOrders[tabId] || []).length;\r\n            countSpan.textContent = `${initialSelectedCount} of ${tags.length}`;\r\n            button.appendChild(countSpan);\r\n            \r\n            button.addEventListener('click', () => switchTab(tabId));\r\n            state.tabButtonsContainer.appendChild(button);\r\n\r\n            const panel = document.createElement('div');\r\n            panel.id = `panel-${tabId}`;\r\n            panel.className = `tab-panel ${isActive ? '' : 'hidden'}`;\r\n            panel.setAttribute('role', 'tabpanel');\r\n            panel.setAttribute('aria-labelledby', `tab-button-${tabId}`);\r\n            \r\n            const titleText = tabId === 'eras' ? 'Select up to 3 Eras:' : `Select up to 3 Songs from ${tabName}:`;\r\n            panel.innerHTML = `\r\n                <h2 class=\"text-lg font-semibold text-gray-700 mb-4\">${titleText}</h2>\r\n                <div class=\"chip-container flex flex-wrap gap-3 mb-6\" data-tab-id=\"${tabId}\"></div>\r\n            `;\r\n            \r\n            state.tabPanelsContainer.appendChild(panel);\r\n            populateChips(tabId, tags);\r\n        }\r\n\r\n        // Initialize when the component is mounted\r\n        function initializeDOMElements() {\r\n            // Main elements\r\n            state.dashboardGridContainer = document.getElementById('dashboard-grid');\r\n            state.tabButtonsContainer = document.getElementById('tab-buttons');\r\n            state.tabPanelsContainer = document.getElementById('tab-panels');\r\n            \r\n            // Sidebar elements\r\n            state.sidebarTitleContainer = document.getElementById('sidebar-title-container');\r\n            state.sidebarChipContainer = document.getElementById('sidebar-chip-container');\r\n            state.sidebarTabButtonReview = document.getElementById('sidebar-tab-button-review');\r\n            \r\n            // Review elements\r\n            state.reviewDisplayArea = document.getElementById('review-display-area');\r\n            state.reviewDisplayStars = document.getElementById('review-display-stars');\r\n            state.reviewDisplayComment = document.getElementById('review-display-comment');\r\n            state.reviewEditorEraName = document.getElementById('review-editor-era-name');\r\n            state.reviewEditorCommentInput = document.getElementById('review-editor-comment-input');\r\n            state.reviewEditorCommentCharCount = document.getElementById('review-editor-comment-char-count');\r\n            state.reviewEditorRatingInputs = document.querySelectorAll('#review-editor-form .star-rating input[name=\"review-editor-rating\"]');\r\n            state.reviewEditorRatingDescription = document.getElementById('review-editor-rating-description');\r\n            \r\n            // Set up review editor events\r\n            state.reviewEditorCommentInput?.addEventListener('input', updateReviewEditorCharCount);\r\n            state.reviewEditorRatingInputs?.forEach(input => {\r\n                input.addEventListener('change', (e) => {\r\n                    updateReviewEditorRatingDescription(parseInt(e.target.value, 10));\r\n                });\r\n            });\r\n        }\r\n\r\n        // Return all methods and state for the template\r\n        return {\r\n            ...toRefs(state),\r\n            showScreen,\r\n            showSaveConfirmModal,\r\n            hideSaveConfirmModal,\r\n            saveAndExit,\r\n            closeSidebar,\r\n            switchSidebarTab,\r\n            showReviewEditor,\r\n            hideReviewEditor,\r\n            saveReview,\r\n            \r\n            // Lifecycle hooks\r\n            onMounted() {\r\n                initializeDOMElements();\r\n                loadRankings();\r\n                showScreen('dashboard');\r\n            }\r\n        };\r\n    }\r\n});\r\n\r\n// Mount the app when the DOM is ready\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    app.mount('#app');\r\n});\r\n"],"names":["createApp","reactive","toRefs","Vue","app","setup","state","savedData","currentSelectionOrders","activeTabId","currentScreen","isSaveModalVisible","isSidebarVisible","currentSidebarTabId","currentSidebarView","isReviewEditorVisible","dashboardGridContainer","tabButtonsContainer","tabPanelsContainer","sidebarTitleContainer","sidebarChipContainer","sidebarTabButtonReview","reviewDisplayArea","reviewDisplayStars","reviewDisplayComment","reviewEditorEraName","reviewEditorCommentInput","reviewEditorCommentCharCount","reviewEditorRatingInputs","reviewEditorRatingDescription","deepCopy","obj","JSON","parse","stringify","showScreen","screenId","closeSidebar","populateDashboard","Object","keys","forEach","key","Array","isArray","selection","setTimeout","innerHTML","createTab","erasWithSongs","map","era","name","id","songs","tabId","updateTabButtonCount","reorderChipsInContainer","switchTab","createDashboardGridItem","eraNamesInOrder","length","createRankIndicatorHTML","rank","emojiHTML","title","totalCount","card","document","createElement","className","dataset","setAttribute","eraData","selectedCount","rating","emoji","eraEmojis","rankIndicatorHTML","starsHTML","eraRankIndex","indexOf","repeat","classList","add","MAX_SELECTION","addEventListener","handleDashboardCardClick","e","preventDefault","appendChild","event","currentTarget","openSidebar","find","baseTitle","titleContainerHTML","parseInt","allTags","originalSongLists","savedSelection","displayOrder","unselectedTags","tag","includes","push","chipDiv","indexInSelection","createTextNode","comment","toggle","textContent","contains","prepend","remove","hideReviewEditor","switchSidebarTab","hideSaveConfirmModal","targetPanelId","replace","getElementById","updateReviewEditorRatingDescription","ratingValue","RATING_DESCRIPTIONS","updateReviewEditorCharCount","currentLength","value","COMMENT_MAX_LENGTH","logCurrentSelection","currentSelection","console","log","button","countSpan","querySelector","totalTags","panel","chipContainer","allChips","from","querySelectorAll","selectedChips","unselectedChips","chip","sort","a","b","originalList","updateChipRanksAndStyles","chips","isMaxSelected","handleChipClick","closest","filter","selectedTag","alert","handleChipKeyDown","targetTabId","force","currentTabButton","currentPanel","newTabButton","newPanel","scrollIntoView","behavior","block","inline","tabName","tags","isActive","tabTarget","nameSpan","initialSelectedCount","titleText","populateChips","tagsToPopulate","passive","showSaveConfirmModal","saveAndExit","saveRankings","localStorage","setItem","LOCAL_STORAGE_KEY","error","showReviewEditor","eraInfo","currentRating","input","checked","saveReview","selectedRatingInput","trim","onMounted","target","dataStr","getItem","undefined","eras","mount"],"version":3,"file":"music-besties-skeleton.664050eb.js.map"}